{"$schema":"http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#","contentVersion":"1.0.0.0","parameters":{"workspaceName":{"type":"string","metadata":"Workspace name","defaultValue":"nhlws"},"skatergameservice":{"type":"string"},"nhlws-WorkspaceDefaultStorage":{"type":"string"}},"variables":{"workspaceId":"[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"},"resources":[{"name":"[concat(parameters('workspaceName'), '/nhl_players_pipeline')]","type":"Microsoft.Synapse/workspaces/pipelines","apiVersion":"2019-06-01-preview","properties":{"activities":[{"name":"Listing","type":"WebActivity","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"method":"GET","headers":{},"url":"https://moneypuck.com/moneypuck/playerData/careers/gameByGame/regular/skaters/","connectVia":{"referenceName":"AutoResolveIntegrationRuntime","type":"IntegrationRuntimeReference"}}},{"name":"Split to rows","type":"SetVariable","dependsOn":[{"activity":"Listing","dependencyConditions":["Succeeded"]}],"policy":{"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"variableName":"Filelisting","value":{"value":"@split(activity('Listing').output.response, '<tr>')","type":"Expression"}}},{"name":"Non csv containing rows removal","type":"Filter","dependsOn":[{"activity":"Split to rows","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"items":{"value":"@variables('Filelisting')","type":"Expression"},"condition":{"value":"@if(equals(indexOf(item(), '.csv'), -1), false, true)","type":"Expression"}}},{"name":"Clean listing to csv names","type":"ForEach","dependsOn":[{"activity":"Non csv containing rows removal","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"items":{"value":"@activity('Non csv containing rows removal').output.Value","type":"Expression"},"isSequential":true,"activities":[{"name":"cleaned rows","type":"AppendVariable","dependsOn":[],"userProperties":[],"typeProperties":{"variableName":"Cleanedlisting","value":{"value":"@substring(substring(item(), add(indexOf(item(), 'href=\"'), length('href=\"')), 100), 0, indexOf(substring(item(), add(indexOf(item(), 'href=\"'), length('href=\"')), 100), '\"'))","type":"Expression"}}},{"name":"Fail1","type":"Fail","dependsOn":[{"activity":"cleaned rows","dependencyConditions":["Failed"]}],"userProperties":[],"typeProperties":{"message":{"value":"@item()","type":"Expression"},"errorCode":"1222"}}]}},{"name":"download files using cleaned listing","type":"ForEach","dependsOn":[{"activity":"Clean listing to csv names","dependencyConditions":["Succeeded"]}],"userProperties":[],"typeProperties":{"items":{"value":"@variables('Cleanedlisting')","type":"Expression"},"activities":[{"name":"Get CSV","type":"Copy","dependsOn":[],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"source":{"type":"BinarySource","storeSettings":{"type":"HttpReadSettings","requestMethod":"GET"},"formatSettings":{"type":"BinaryReadSettings"}},"sink":{"type":"BinarySink","storeSettings":{"type":"AzureBlobFSWriteSettings","copyBehavior":"FlattenHierarchy"}},"enableStaging":false},"inputs":[{"referenceName":"HTTP_Skaters_Binary","type":"DatasetReference","parameters":{"CSV_Name":{"value":"@item()","type":"Expression"}}}],"outputs":[{"referenceName":"ADLS_Skaters_info","type":"DatasetReference","parameters":{}}]}]}},{"name":"Notebook1","type":"SynapseNotebook","dependsOn":[{"activity":"download files using cleaned listing","dependencyConditions":["Succeeded"]}],"policy":{"timeout":"0.12:00:00","retry":0,"retryIntervalInSeconds":30,"secureOutput":false,"secureInput":false},"userProperties":[],"typeProperties":{"notebook":{"referenceName":"nhl_players_notebook","type":"NotebookReference"},"snapshot":true,"conf":{"spark.dynamicAllocation.enabled":null,"spark.dynamicAllocation.minExecutors":null,"spark.dynamicAllocation.maxExecutors":null},"numExecutors":null}}],"policy":{"elapsedTimeMetric":{}},"variables":{"Filelisting":{"type":"Array"},"Initialcleaning":{"type":"String"},"Cleanedlisting":{"type":"Array"}},"annotations":[]},"dependsOn":["[concat(variables('workspaceId'), '/notebooks/nhl_players_notebook')]","[concat(variables('workspaceId'), '/datasets/HTTP_Skaters_Binary')]","[concat(variables('workspaceId'), '/datasets/ADLS_Skaters_info')]"]},{"name":"[concat(parameters('workspaceName'), '/nhl_players_notebook')]","type":"Microsoft.Synapse/workspaces/notebooks","apiVersion":"2019-06-01-preview","properties":{"nbformat":4,"nbformat_minor":2,"bigDataPool":{"referenceName":"nhlsparkpool","type":"BigDataPoolReference"},"sessionProperties":{"driverMemory":"28g","driverCores":4,"executorMemory":"28g","executorCores":4,"numExecutors":2,"conf":{"spark.dynamicAllocation.enabled":"false","spark.dynamicAllocation.minExecutors":"2","spark.dynamicAllocation.maxExecutors":"2","spark.autotune.trackingId":"c852f7a7-acb4-4954-a560-339b66d86d25"}},"metadata":{"saveOutput":true,"enableDebugMode":false,"kernelspec":{"name":"synapse_pyspark","display_name":"Synapse PySpark"},"language_info":{"name":"python"},"a365ComputeOptions":{"id":"/subscriptions/23b183d5-a30f-46b8-b418-ad060fb67787/resourceGroups/Simon-rg/providers/Microsoft.Synapse/workspaces/nhlws/bigDataPools/nhlsparkpool","name":"nhlsparkpool","type":"Spark","endpoint":"https://nhlws.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/nhlsparkpool","auth":{"type":"AAD","authResource":"https://dev.azuresynapse.net"},"sparkVersion":"3.4","nodeCount":10,"cores":4,"memory":28},"sessionKeepAliveTimeout":30},"cells":[{"cell_type":"markdown","metadata":{"nteract":{"transient":{"deleting":false}}},"source":["Import needed libraries"]},{"cell_type":"code","metadata":{"microsoft":{"language":"python"}},"source":["%%pyspark\r\n","\r\n"," from pyspark.sql.types import *\r\n"," from pyspark.sql.functions import *\r\n"," from pyspark.sql import SparkSession\r\n"," from pyspark.sql.functions import to_date"],"outputs":[],"execution_count":39},{"cell_type":"markdown","metadata":{"nteract":{"transient":{"deleting":false}}},"source":["Read in all datasets to dataframes"]},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_skatergames = spark.read.csv('abfss://nhlroot@simondemosimondemo.dfs.core.windows.net/nhlrawplayerlevel/*.csv', header=True)\r\n","display(df_skatergames.limit(20))\r\n","num_rows = df_skatergames.count()\r\n","\r\n","# Check the qualities of the dataframe\r\n","num_players = df_skatergames.select(\"playerID\").distinct().count()\r\n","print(f\"Number of players: {num_players}\")\r\n","num_rows = df_skatergames.count()\r\n","print(f\"Number of rows: {num_rows}\")\r\n","num_columns = len(df_skatergames.columns)\r\n","print(f\"Number of columns: {num_columns}\")"],"outputs":[],"execution_count":40},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_teams = spark.read.csv('abfss://nhlroot@simondemosimondemo.dfs.core.windows.net/teams.csv', header=True)\r\n","display(df_teams)"],"outputs":[],"execution_count":41},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_seasons = spark.read.csv('abfss://nhlroot@simondemosimondemo.dfs.core.windows.net/seasons.csv', header=True)\r\n","display(df_seasons)"],"outputs":[],"execution_count":42},{"cell_type":"markdown","metadata":{"nteract":{"transient":{"deleting":false}}},"source":["Select wanted columns for the games facts table"]},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_cleanskatergames = df_skatergames.select(\"playerID\", \"name\", \"gameID\", \"gameDate\", \"playerTeam\", \"opposingTeam\", \"season\", \"situation\", \"I_F_points\", \"I_F_goals\", \"penalties\", \"I_F_penalityminutes\", \"faceoffsWon\", \"faceoffsLost\", \"icetime\")\r\n","display(df_cleanskatergames.limit(20))"],"outputs":[],"execution_count":43},{"cell_type":"markdown","metadata":{"nteract":{"transient":{"deleting":false}}},"source":["Clean up team IDs"]},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\r\n","    'playerTeam', \r\n","    when(col('playerTeam') == \"L.A\", \"LAK\")\r\n","    .when(col('playerTeam') == \"N.J\", \"NJD\")\r\n","    .when(col('playerTeam') == \"S.J\", \"SJS\")\r\n","    .when(col('playerTeam') == \"T.B\", \"TBL\")\r\n","    .otherwise(col('playerTeam'))\r\n",")\r\n","\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\r\n","    'opposingTeam', \r\n","    when(col('opposingTeam') == \"L.A\", \"LAK\")\r\n","    .when(col('opposingTeam') == \"N.J\", \"NJD\")\r\n","    .when(col('opposingTeam') == \"S.J\", \"SJS\")\r\n","    .when(col('opposingTeam') == \"T.B\", \"TBL\")\r\n","    .otherwise(col('opposingTeam'))\r\n",")"],"outputs":[],"execution_count":44},{"cell_type":"markdown","metadata":{"nteract":{"transient":{"deleting":false}}},"source":["Cast columns to proper types"]},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_cleanskatergames = df_cleanskatergames.withColumn(\"playerID\", col(\"playerID\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"name\", col(\"name\").cast(StringType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"gameId\", col(\"gameId\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"gameDate\", to_date(df_cleanskatergames.gameDate, \"yyyyMMdd\"))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"gameDate\", col(\"gameDate\").cast(DateType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"playerTeam\", col(\"playerTeam\").cast(StringType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"opposingTeam\", col(\"opposingTeam\").cast(StringType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"season\", col(\"season\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"situation\", col(\"situation\").cast(StringType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"I_F_points\", col(\"I_F_points\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"I_F_goals\", col(\"I_F_goals\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"penalties\", col(\"penalties\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"I_F_penalityminutes\", col(\"I_F_penalityminutes\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"faceoffsWon\", col(\"faceoffsWon\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"faceoffsLost\", col(\"faceoffsLost\").cast(IntegerType()))\r\n","df_cleanskatergames = df_cleanskatergames.withColumn(\"icetime\", col(\"icetime\").cast(IntegerType()))\r\n","\r\n","display(df_cleanskatergames)"],"outputs":[],"execution_count":45},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_teams = df_teams.withColumn(\"TeamID\", col(\"TeamID\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"Conference\", col(\"Conference\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"Division\", col(\"Division\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"TeamName\", col(\"TeamName\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"City\", col(\"City\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"State\", col(\"State\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"Arena\", col(\"Arena\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"Capacity\", col(\"Capacity\").cast(IntegerType()))\r\n","df_teams = df_teams.withColumn(\"Founded\", col(\"Founded\").cast(IntegerType()))\r\n","df_teams = df_teams.withColumn(\"Joined\", col(\"Joined\").cast(IntegerType()))\r\n","df_teams = df_teams.withColumn(\"General manager\", col(\"General manager\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"Head coach\", col(\"Head coach\").cast(StringType()))\r\n","df_teams = df_teams.withColumn(\"Captain\", col(\"Captain\").cast(StringType()))"],"outputs":[],"execution_count":46},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}},"collapsed":false},"source":["df_seasons = df_seasons.withColumn(\"Season\", col(\"Season\").cast(IntegerType()))\r\n","df_seasons = df_seasons.withColumn(\"NoTeams\", col(\"NoTeams\").cast(IntegerType()))\r\n","df_seasons = df_seasons.withColumn(\"RegGames\", col(\"RegGames\").cast(IntegerType()))\r\n","df_seasons = df_seasons.withColumn(\"Start\", col(\"Start\").cast(DateType()))\r\n","df_seasons = df_seasons.withColumn(\"Finish\", col(\"Finish\").cast(DateType()))\r\n","df_seasons = df_seasons.withColumn(\"Champion\", col(\"Champion\").cast(StringType()))"],"outputs":[],"execution_count":47},{"cell_type":"markdown","metadata":{"nteract":{"transient":{"deleting":false}}},"source":["Write dfs to data warehouse"]},{"cell_type":"code","metadata":{"jupyter":{"source_hidden":false,"outputs_hidden":false},"nteract":{"transient":{"deleting":false}}},"source":["import com.microsoft.spark.sqlanalytics\r\n","from com.microsoft.spark.sqlanalytics.Constants import Constants\r\n","from pyspark.sql.functions import col\r\n","\r\n","df_teams.write.mode(\"overwrite\").synapsesql(\"nhlsqlpool.dbo.dimteamsp\")\r\n","df_seasons.write.mode(\"overwrite\").synapsesql(\"nhlsqlpool.dbo.dimseasonsp\")\r\n","df_cleanskatergames.write.mode(\"overwrite\").synapsesql(\"nhlsqlpool.dbo.factgamesp\")"],"outputs":[],"execution_count":48}]},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/HTTP_Skaters_Binary')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('skatergameservice')]","type":"LinkedServiceReference"},"parameters":{"CSV_Name":{"type":"string"}},"annotations":[],"type":"Binary","typeProperties":{"location":{"type":"HttpServerLocation","relativeUrl":{"value":"@dataset().CSV_Name","type":"Expression"}}}},"dependsOn":[]},{"name":"[concat(parameters('workspaceName'), '/ADLS_Skaters_info')]","type":"Microsoft.Synapse/workspaces/datasets","apiVersion":"2019-06-01-preview","properties":{"linkedServiceName":{"referenceName":"[parameters('nhlws-WorkspaceDefaultStorage')]","type":"LinkedServiceReference"},"annotations":[],"type":"Binary","typeProperties":{"location":{"type":"AzureBlobFSLocation","folderPath":"nhlrawplayerlevel","fileSystem":"nhlroot"}}},"dependsOn":[]}]}